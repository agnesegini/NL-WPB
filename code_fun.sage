"""
This file contains the basic modules and functions
"""

import  itertools 

from multiprocessing import Pool
from functools import partial
import time
import numpy as np
from datetime import datetime


##rename iterators
permit=itertools.permutations
prodit=itertools.product


#returns an iterator over the v length subsequences of range(n) (lex ordering)
def ithp(n,v):
  return itertools.combinations(range(n), v)

#compute the hamming weight of a vector x
def hw(x):
     x=vector(ZZ,x)
     w=vector(ones_matrix(ZZ,1,len(x)))
     return w*x

#returns a matrix A over F2 whose rows are the strings of lenght n and hamming weight v, with lex order.
def all_fix_hw(n,v):
  it=ithp(n,v)
  b=binomial(n,v)
  A=matrix(GF(2),b,n)
  j=0
  for rp in it:
      for i in rp: A[j,i]=1
      j+=1
  return A 


#given as input two integers n and v retunrs: the linear code C over F2, that is a spherically punctured Reed Muller code of order 1 of lenght k=(n choose v), generated by A. M is a generator matrix of C in normal form.
def gen_code_per(n,v):
  B=all_fix_hw(n,v).T
  k=B.ncols()
  assert k==binomial(n,v)
  A=ones_matrix(GF(2),1,k).stack(B)
  C=LinearCode(A)
  M=C.generator_matrix()
  return M,C,k,A  
  
#returns the hamming distance of the F2's vectors c and r  
def h_dist(c,r):
   return hw(c+r)

#returns the hamming distance of the F2 vector r  
def dist_all(C,r):
  M=C.generator_matrix()
  d=C.dimension()
  it=prodit(range(2), repeat=d)
  return map(lambda x: h_dist(vector(GF(2),x)*M,r) ,it)
  
  
def randint_par(n):
  return np.random.RandomState().randint(0,n)
  
  

matrix_max=matrix(ZZ,9,9)

matrix_max[4,2]=1
matrix_max[5,2]=matrix_max[5,3]=3
matrix_max[6,2]=matrix_max[6,4]=4
matrix_max[6,3]=6
matrix_max[7,2]=matrix_max[7,5]=6
matrix_max[7,3]=matrix_max[7,4]=13
matrix_max[8,2]=matrix_max[8,6]=9
matrix_max[8,3]=matrix_max[8,5]=21
matrix_max[8,4]=27


orange=(1,0.5,0)  
green=(0,0.8,0) 
blue=(0,0,0.8)

def plot_bar(O,name,per=False,color=blue):
    v=vector(RR,O)
    if per: v=v/sum(v)*100
    pl=bar_chart(v,width=0.8,rgbcolor=color, fontsize=16)
    pl.plot()
    pl.save(name+'.png') 
    return pl
